test.sh: 3: test.sh: [[: not found
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘bool gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
Fuzzer.cpp:197:93:   required from ‘{anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:197:86:   required from ‘struct {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:197:46:   required from ‘void {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:477:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:213:64: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
             if(pair.first.lock() == (*dstNode) and pair.second == w)
                                                                ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘bool gdwg::Graph<N, E>::isNode(const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
Fuzzer.cpp:224:67:   required from ‘{anonymous}::_testIsNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:224:60:   required from ‘struct {anonymous}::_testIsNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:224:31:   required from ‘void {anonymous}::_testIsNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:514:36:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:401:24: error: no match for ‘operator==’ (operand types are ‘const {anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
             if(value() == val){ // if find the node with value equal to val, return true
                        ^
Fuzzer.cpp: In instantiation of ‘std::set<NodeLabel> {anonymous}::_extractGdwgNodes(const gdwg::Graph<N, E>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’:
Fuzzer.cpp:403:39:   required from ‘void {anonymous}::_checkEquality(const gdwg::Graph<N, E>&, const {anonymous}::SlowGraph<NodeLabel, EdgeValue>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:536:35:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Fuzzer.cpp:127:9: error: no matching function for call to ‘gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::printNodes(std::ofstream&) const’
         graph.printNodes(nullStream);
         ^
In file included from Fuzzer.cpp:16:0:
Graph.h:436:10: note: candidate: void gdwg::Graph<N, E>::printNodes() const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]
     void Graph<N, E>::printNodes() const{
          ^
Graph.h:436:10: note:   candidate expects 0 arguments, 1 provided
Fuzzer.cpp: In instantiation of ‘std::set<std::pair<_T1, _T2> > {anonymous}::_extractGdwgEdges(const gdwg::Graph<N, E>&, const NodeLabel&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’:
Fuzzer.cpp:412:43:   required from ‘void {anonymous}::_checkEquality(const gdwg::Graph<N, E>&, const {anonymous}::SlowGraph<NodeLabel, EdgeValue>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:536:35:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Fuzzer.cpp:143:9: error: no matching function for call to ‘gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::printEdges(const {anonymous}::Unhashable&, std::ofstream&) const’
         graph.printEdges(from, nullStream);
         ^
In file included from Fuzzer.cpp:16:0:
Graph.h:451:10: note: candidate: void gdwg::Graph<N, E>::printEdges(const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]
     void Graph<N, E>::printEdges(const N& val) const{
          ^
Graph.h:451:10: note:   candidate expects 1 argument, 2 provided
Graph.h: In instantiation of ‘void gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
Fuzzer.cpp:386:32:   required from ‘{anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:386:63:   required from ‘struct {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:386:27:   required from ‘void {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:548:40:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:370:37: error: ‘class gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node’ has no member named ‘outgoing_edgesout_edges’
             auto edge = std::find_if(
                                     ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘bool gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]’:
Fuzzer.cpp:197:93:   required from ‘{anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:197:86:   required from ‘struct {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:197:46:   required from ‘void {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:477:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:631:45:   required from here
Graph.h:213:64: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
             if(pair.first.lock() == (*dstNode) and pair.second == w)
                                                                ^
Fuzzer.cpp: In instantiation of ‘std::set<NodeLabel> {anonymous}::_extractGdwgNodes(const gdwg::Graph<N, E>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’:
Fuzzer.cpp:403:39:   required from ‘void {anonymous}::_checkEquality(const gdwg::Graph<N, E>&, const {anonymous}::SlowGraph<NodeLabel, EdgeValue>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:536:35:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:631:45:   required from here
Fuzzer.cpp:127:9: error: no matching function for call to ‘gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::printNodes(std::ofstream&) const’
         graph.printNodes(nullStream);
         ^
In file included from Fuzzer.cpp:16:0:
Graph.h:436:10: note: candidate: void gdwg::Graph<N, E>::printNodes() const [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]
     void Graph<N, E>::printNodes() const{
          ^
Graph.h:436:10: note:   candidate expects 0 arguments, 1 provided
Fuzzer.cpp: In instantiation of ‘std::set<std::pair<_T1, _T2> > {anonymous}::_extractGdwgEdges(const gdwg::Graph<N, E>&, const NodeLabel&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’:
Fuzzer.cpp:412:43:   required from ‘void {anonymous}::_checkEquality(const gdwg::Graph<N, E>&, const {anonymous}::SlowGraph<NodeLabel, EdgeValue>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:536:35:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:631:45:   required from here
Fuzzer.cpp:143:9: error: no matching function for call to ‘gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::printEdges(const {anonymous}::Hashable&, std::ofstream&) const’
         graph.printEdges(from, nullStream);
         ^
In file included from Fuzzer.cpp:16:0:
Graph.h:451:10: note: candidate: void gdwg::Graph<N, E>::printEdges(const N&) const [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]
     void Graph<N, E>::printEdges(const N& val) const{
          ^
Graph.h:451:10: note:   candidate expects 1 argument, 2 provided
Graph.h: In instantiation of ‘void gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]’:
Fuzzer.cpp:386:32:   required from ‘{anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:386:63:   required from ‘struct {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:386:27:   required from ‘void {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:548:40:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:631:45:   required from here
Graph.h:370:37: error: ‘class gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node’ has no member named ‘outgoing_edgesout_edges’
             auto edge = std::find_if(
                                     ^
Graph.h: In instantiation of ‘bool gdwg::Graph<N, E>::isNode(const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
Fuzzer.cpp:224:67:   required from ‘{anonymous}::_testIsNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:224:60:   required from ‘struct {anonymous}::_testIsNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:224:31:   required from ‘void {anonymous}::_testIsNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:514:36:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:401:24: error: no match for ‘operator==’ (operand types are ‘const {anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
             if(value() == val){ // if find the node with value equal to val, return true
                        ^
Fuzzer.cpp: In instantiation of ‘std::set<NodeLabel> {anonymous}::_extractGdwgNodes(const gdwg::Graph<N, E>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’:
Fuzzer.cpp:403:39:   required from ‘void {anonymous}::_checkEquality(const gdwg::Graph<N, E>&, const {anonymous}::SlowGraph<NodeLabel, EdgeValue>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:536:35:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Fuzzer.cpp:127:9: error: no matching function for call to ‘gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::printNodes(std::ofstream&) const’
         graph.printNodes(nullStream);
         ^
In file included from Fuzzer.cpp:16:0:
Graph.h:436:10: note: candidate: void gdwg::Graph<N, E>::printNodes() const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]
     void Graph<N, E>::printNodes() const{
          ^
Graph.h:436:10: note:   candidate expects 0 arguments, 1 provided
Fuzzer.cpp: In instantiation of ‘std::set<std::pair<_T1, _T2> > {anonymous}::_extractGdwgEdges(const gdwg::Graph<N, E>&, const NodeLabel&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’:
Fuzzer.cpp:412:43:   required from ‘void {anonymous}::_checkEquality(const gdwg::Graph<N, E>&, const {anonymous}::SlowGraph<NodeLabel, EdgeValue>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:536:35:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Fuzzer.cpp:143:9: error: no matching function for call to ‘gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::printEdges(const {anonymous}::Unhashable&, std::ofstream&) const’
         graph.printEdges(from, nullStream);
         ^
In file included from Fuzzer.cpp:16:0:
Graph.h:451:10: note: candidate: void gdwg::Graph<N, E>::printEdges(const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]
     void Graph<N, E>::printEdges(const N& val) const{
          ^
Graph.h:451:10: note:   candidate expects 1 argument, 2 provided
Graph.h: In instantiation of ‘void gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
Fuzzer.cpp:386:32:   required from ‘{anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:386:63:   required from ‘struct {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:386:27:   required from ‘void {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:548:40:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:370:37: error: ‘class gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node’ has no member named ‘outgoing_edgesout_edges’
             auto edge = std::find_if(
                                     ^
Fuzzer.cpp: In instantiation of ‘std::set<NodeLabel> {anonymous}::_extractGdwgNodes(const gdwg::Graph<N, E>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Hashable]’:
Fuzzer.cpp:403:39:   required from ‘void {anonymous}::_checkEquality(const gdwg::Graph<N, E>&, const {anonymous}::SlowGraph<NodeLabel, EdgeValue>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:536:35:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:643:43:   required from here
Fuzzer.cpp:127:9: error: no matching function for call to ‘gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::printNodes(std::ofstream&) const’
         graph.printNodes(nullStream);
         ^
In file included from Fuzzer.cpp:16:0:
Graph.h:436:10: note: candidate: void gdwg::Graph<N, E>::printNodes() const [with N = {anonymous}::Hashable; E = {anonymous}::Hashable]
     void Graph<N, E>::printNodes() const{
          ^
Graph.h:436:10: note:   candidate expects 0 arguments, 1 provided
Fuzzer.cpp: In instantiation of ‘std::set<std::pair<_T1, _T2> > {anonymous}::_extractGdwgEdges(const gdwg::Graph<N, E>&, const NodeLabel&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Hashable]’:
Fuzzer.cpp:412:43:   required from ‘void {anonymous}::_checkEquality(const gdwg::Graph<N, E>&, const {anonymous}::SlowGraph<NodeLabel, EdgeValue>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:536:35:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:643:43:   required from here
Fuzzer.cpp:143:9: error: no matching function for call to ‘gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::printEdges(const {anonymous}::Hashable&, std::ofstream&) const’
         graph.printEdges(from, nullStream);
         ^
In file included from Fuzzer.cpp:16:0:
Graph.h:451:10: note: candidate: void gdwg::Graph<N, E>::printEdges(const N&) const [with N = {anonymous}::Hashable; E = {anonymous}::Hashable]
     void Graph<N, E>::printEdges(const N& val) const{
          ^
Graph.h:451:10: note:   candidate expects 1 argument, 2 provided
Graph.h: In instantiation of ‘void gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Hashable; E = {anonymous}::Hashable]’:
Fuzzer.cpp:386:32:   required from ‘{anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:386:63:   required from ‘struct {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:386:27:   required from ‘void {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:548:40:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:643:43:   required from here
Graph.h:370:37: error: ‘class gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node’ has no member named ‘outgoing_edgesout_edges’
             auto edge = std::find_if(
                                     ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&)::<lambda(auto:2)> [with auto:2 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:2)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:2)>]’
Graph.h:127:38:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:130:34: error: ‘equalN’ was not declared in this scope
                     return equalN(n -> data, gnode -> data);
                                  ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:2)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:2)>]’
Graph.h:127:38:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&)::<lambda(auto:3)> [with auto:3 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:3)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:3)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:3)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:3)>]’
Graph.h:138:34:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:139:42: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘{anonymous}::Unhashable’)
                         return n -> data == edge.lock() -> data;
                                          ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:3)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:3)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:3)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:3)>]’
Graph.h:138:34:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&)::<lambda(auto:4)> [with auto:4 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:4)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:4)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:4)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:4)>]’
Graph.h:146:46:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:148:42: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘{anonymous}::Unhashable’)
                         return n -> data == edge.first.lock() -> data;
                                          ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:4)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:4)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:4)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:4)>]’
Graph.h:146:46:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&)::<lambda(auto:2)> [with auto:2 = std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>; N = {anonymous}::Hashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:2)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:2)>]’
Graph.h:127:38:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:631:45:   required from here
Graph.h:130:34: error: ‘equalN’ was not declared in this scope
                     return equalN(n -> data, gnode -> data);
                                  ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:2)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:2)>]’
Graph.h:127:38:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:631:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&)::<lambda(auto:2)> [with auto:2 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:2)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:2)>]’
Graph.h:127:38:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:130:34: error: ‘equalN’ was not declared in this scope
                     return equalN(n -> data, gnode -> data);
                                  ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:2)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:2)>]’
Graph.h:127:38:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&)::<lambda(auto:3)> [with auto:3 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:3)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:3)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:3)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:3)>]’
Graph.h:138:34:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:139:42: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘{anonymous}::Unhashable’)
                         return n -> data == edge.lock() -> data;
                                          ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:3)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:3)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:3)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:3)>]’
Graph.h:138:34:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&)::<lambda(auto:4)> [with auto:4 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:4)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:4)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:4)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:4)>]’
Graph.h:146:46:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:148:42: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘{anonymous}::Unhashable’)
                         return n -> data == edge.first.lock() -> data;
                                          ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:4)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:4)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:4)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:4)>]’
Graph.h:146:46:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&)::<lambda(auto:2)> [with auto:2 = std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>; N = {anonymous}::Hashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Hashable]::<lambda(auto:2)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Hashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Hashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Hashable]::<lambda(auto:2)>]’
Graph.h:127:38:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:643:43:   required from here
Graph.h:130:34: error: ‘equalN’ was not declared in this scope
                     return equalN(n -> data, gnode -> data);
                                  ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Hashable]::<lambda(auto:2)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Hashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Hashable]::<lambda(auto:2)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Hashable]::<lambda(auto:2)>]’
Graph.h:127:38:   required from ‘gdwg::Graph<N, E>::Graph(const gdwg::Graph<N, E>&) [with N = {anonymous}::Hashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:444:13:   required from ‘{anonymous}::_test()::Graph& {anonymous}::_test()::Graph::operator=(const {anonymous}::_test()::Graph&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:457:9:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:643:43:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&)::<lambda(auto:5)> [with auto:5 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:5)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:5)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:5)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:5)>]’
Graph.h:202:36:   required from ‘bool gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:197:93:   required from ‘{anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:197:86:   required from ‘struct {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:197:46:   required from ‘void {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:477:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:203:33: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
             return node -> data == src;
                                 ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:5)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:5)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:5)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:5)>]’
Graph.h:202:36:   required from ‘bool gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:197:93:   required from ‘{anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:197:86:   required from ‘struct {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:197:46:   required from ‘void {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:477:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&)::<lambda(auto:6)> [with auto:6 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:6)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:6)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:6)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:6)>]’
Graph.h:206:36:   required from ‘bool gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:197:93:   required from ‘{anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:197:86:   required from ‘struct {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:197:46:   required from ‘void {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:477:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:207:33: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
             return node -> data == dst;
                                 ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:6)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:6)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:6)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:6)>]’
Graph.h:206:36:   required from ‘bool gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:197:93:   required from ‘{anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:197:86:   required from ‘struct {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:197:46:   required from ‘void {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:477:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::isConnected(const N&, const N&) const::<lambda(auto:20)> [with auto:20 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:20)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:20)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:20)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:20)>]’
Graph.h:412:37:   required from ‘bool gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:243:100:   required from ‘{anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:243:91:   required from ‘struct {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:243:46:   required from ‘void {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:517:41:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:414:37: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
                 return node -> data == src;
                                     ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:20)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:20)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:20)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:20)>]’
Graph.h:412:37:   required from ‘bool gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:243:100:   required from ‘{anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:243:91:   required from ‘struct {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:243:46:   required from ‘void {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:517:41:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::isConnected(const N&, const N&) const::<lambda(auto:21)> [with auto:21 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:21)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:21)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:21)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:21)>]’
Graph.h:418:37:   required from ‘bool gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:243:100:   required from ‘{anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:243:91:   required from ‘struct {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:243:46:   required from ‘void {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:517:41:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:420:37: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
                 return node -> data == dst;
                                     ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:21)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:21)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:21)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:21)>]’
Graph.h:418:37:   required from ‘bool gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:243:100:   required from ‘{anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:243:91:   required from ‘struct {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:243:46:   required from ‘void {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:517:41:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::isConnected(const N&, const N&) const::<lambda(auto:22)> [with auto:22 = std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:22)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:22)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:22)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:22)>]’
Graph.h:425:28:   required from ‘bool gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:243:100:   required from ‘{anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:243:91:   required from ‘struct {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:243:46:   required from ‘void {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:517:41:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:429:58: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘{anonymous}::Unhashable’)
                         return pair.first.lock() -> data == (*dst_node) -> data;
                                                          ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:22)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:22)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:22)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:22)>]’
Graph.h:425:28:   required from ‘bool gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:243:100:   required from ‘{anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:243:91:   required from ‘struct {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:243:46:   required from ‘void {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:517:41:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::replace(const N&, const N&)::<lambda(auto:7)> [with auto:7 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:7)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:7)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:7)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:7)>]’
Graph.h:229:33:   required from ‘bool gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:277:96:   required from ‘{anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:277:86:   required from ‘struct {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:277:46:   required from ‘void {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:526:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:230:33: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
             return node -> data == oldData;
                                 ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:7)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:7)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:7)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:7)>]’
Graph.h:229:33:   required from ‘bool gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:277:96:   required from ‘{anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:277:86:   required from ‘struct {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:277:46:   required from ‘void {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:526:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::replace(const N&, const N&)::<lambda(auto:8)> [with auto:8 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:8)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:8)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:8)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:8)>]’
Graph.h:234:25:   required from ‘bool gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:277:96:   required from ‘{anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:277:86:   required from ‘struct {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:277:46:   required from ‘void {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:526:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:235:37: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
                 return node -> data == newData;
                                     ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:8)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:8)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:8)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:8)>]’
Graph.h:234:25:   required from ‘bool gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:277:96:   required from ‘{anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:277:86:   required from ‘struct {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:277:46:   required from ‘void {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:526:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::mergeReplace(const N&, const N&)::<lambda(auto:9)> [with auto:9 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:9)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:9)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:9)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:9)>]’
Graph.h:251:37:   required from ‘void gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:325:86:   required from ‘{anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:325:76:   required from ‘struct {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:325:31:   required from ‘void {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:529:42:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:252:33: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
             return node -> data == oldData;
                                 ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:9)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:9)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:9)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:9)>]’
Graph.h:251:37:   required from ‘void gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:325:86:   required from ‘{anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:325:76:   required from ‘struct {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:325:31:   required from ‘void {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:529:42:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::mergeReplace(const N&, const N&)::<lambda(auto:10)> [with auto:10 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:10)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:10)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:10)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:10)>]’
Graph.h:254:37:   required from ‘void gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:325:86:   required from ‘{anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:325:76:   required from ‘struct {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:325:31:   required from ‘void {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:529:42:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:255:33: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
             return node -> data == newData;
                                 ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:10)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:10)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:10)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:10)>]’
Graph.h:254:37:   required from ‘void gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:325:86:   required from ‘{anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:325:76:   required from ‘struct {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:325:31:   required from ‘void {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:529:42:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::mergeReplace(const N&, const N&)::<lambda(auto:11)> [with auto:11 = std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:11)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:11)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:11)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:11)>]’
Graph.h:277:29:   required from ‘void gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:325:86:   required from ‘{anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:325:76:   required from ‘struct {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:325:31:   required from ‘void {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:529:42:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:279:73: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘{anonymous}::Unhashable’)
                 return e.first.lock() == edge.first.lock() and e.second == edge.second;
                                                                         ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:11)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:11)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:11)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:11)>]’
Graph.h:277:29:   required from ‘void gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:325:86:   required from ‘{anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:325:76:   required from ‘struct {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:325:31:   required from ‘void {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:529:42:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::deleteNode(const N&)::<lambda(auto:14)> [with auto:14 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:14)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:14)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:14)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:14)>]’
Graph.h:327:33:   required from ‘void gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:367:32:   required from ‘{anonymous}::_testDeleteNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:367:53:   required from ‘struct {anonymous}::_testDeleteNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:367:27:   required from ‘void {anonymous}::_testDeleteNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:545:40:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:329:35: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
                 return it -> data == val;
                                   ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:14)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:14)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:14)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:14)>]’
Graph.h:327:33:   required from ‘void gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:367:32:   required from ‘{anonymous}::_testDeleteNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:367:53:   required from ‘struct {anonymous}::_testDeleteNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:367:27:   required from ‘void {anonymous}::_testDeleteNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:545:40:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&)::<lambda(auto:17)> [with auto:17 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:17)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:17)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:17)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:17)>]’
Graph.h:363:33:   required from ‘void gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:386:32:   required from ‘{anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:386:63:   required from ‘struct {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:386:27:   required from ‘void {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:548:40:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
Graph.h:365:35: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
                 return it -> data == src;
                                   ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:17)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:17)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:17)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Unhashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]::<lambda(auto:17)>]’
Graph.h:363:33:   required from ‘void gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:386:32:   required from ‘{anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:386:63:   required from ‘struct {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:386:27:   required from ‘void {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:548:40:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:625:47:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::mergeReplace(const N&, const N&)::<lambda(auto:11)> [with auto:11 = std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>; N = {anonymous}::Hashable; E = {anonymous}::Unhashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:11)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:11)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:11)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:11)>]’
Graph.h:277:29:   required from ‘void gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:325:86:   required from ‘{anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:325:76:   required from ‘struct {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:325:31:   required from ‘void {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:529:42:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:631:45:   required from here
Graph.h:279:73: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘{anonymous}::Unhashable’)
                 return e.first.lock() == edge.first.lock() and e.second == edge.second;
                                                                         ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:11)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:11)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:11)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Hashable, {anonymous}::Unhashable>::Node>, {anonymous}::Unhashable> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]::<lambda(auto:11)>]’
Graph.h:277:29:   required from ‘void gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Hashable; E = {anonymous}::Unhashable]’
Fuzzer.cpp:325:86:   required from ‘{anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:325:76:   required from ‘struct {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]::<lambda()>’
Fuzzer.cpp:325:31:   required from ‘void {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:529:42:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Hashable; EdgeValue = {anonymous}::Unhashable]’
Fuzzer.cpp:631:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&)::<lambda(auto:5)> [with auto:5 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:5)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:5)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:5)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:5)>]’
Graph.h:202:36:   required from ‘bool gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:197:93:   required from ‘{anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:197:86:   required from ‘struct {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:197:46:   required from ‘void {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:477:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:203:33: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
             return node -> data == src;
                                 ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:5)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:5)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:5)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:5)>]’
Graph.h:202:36:   required from ‘bool gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:197:93:   required from ‘{anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:197:86:   required from ‘struct {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:197:46:   required from ‘void {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:477:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&)::<lambda(auto:6)> [with auto:6 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:6)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:6)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:6)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:6)>]’
Graph.h:206:36:   required from ‘bool gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:197:93:   required from ‘{anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:197:86:   required from ‘struct {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:197:46:   required from ‘void {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:477:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:207:33: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
             return node -> data == dst;
                                 ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:6)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:6)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:6)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:6)>]’
Graph.h:206:36:   required from ‘bool gdwg::Graph<N, E>::addEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:197:93:   required from ‘{anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:197:86:   required from ‘struct {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:197:46:   required from ‘void {anonymous}::_testAddEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:477:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::isConnected(const N&, const N&) const::<lambda(auto:20)> [with auto:20 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:20)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:20)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:20)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:20)>]’
Graph.h:412:37:   required from ‘bool gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:243:100:   required from ‘{anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:243:91:   required from ‘struct {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:243:46:   required from ‘void {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:517:41:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:414:37: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
                 return node -> data == src;
                                     ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:20)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:20)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:20)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:20)>]’
Graph.h:412:37:   required from ‘bool gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:243:100:   required from ‘{anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:243:91:   required from ‘struct {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:243:46:   required from ‘void {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:517:41:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::isConnected(const N&, const N&) const::<lambda(auto:21)> [with auto:21 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:21)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:21)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:21)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:21)>]’
Graph.h:418:37:   required from ‘bool gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:243:100:   required from ‘{anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:243:91:   required from ‘struct {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:243:46:   required from ‘void {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:517:41:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:420:37: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
                 return node -> data == dst;
                                     ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:21)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:21)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:21)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:21)>]’
Graph.h:418:37:   required from ‘bool gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:243:100:   required from ‘{anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:243:91:   required from ‘struct {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:243:46:   required from ‘void {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:517:41:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::isConnected(const N&, const N&) const::<lambda(auto:22)> [with auto:22 = std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>; N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:22)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:22)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:22)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:22)>]’
Graph.h:425:28:   required from ‘bool gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:243:100:   required from ‘{anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:243:91:   required from ‘struct {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:243:46:   required from ‘void {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:517:41:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:429:58: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘{anonymous}::Unhashable’)
                         return pair.first.lock() -> data == (*dst_node) -> data;
                                                          ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:22)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:22)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:22)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>*, std::vector<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable>, std::allocator<std::pair<std::weak_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, {anonymous}::Hashable> > > >; _Predicate = gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:22)>]’
Graph.h:425:28:   required from ‘bool gdwg::Graph<N, E>::isConnected(const N&, const N&) const [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:243:100:   required from ‘{anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:243:91:   required from ‘struct {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:243:46:   required from ‘void {anonymous}::_testIsConnected(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:517:41:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::replace(const N&, const N&)::<lambda(auto:7)> [with auto:7 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:7)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:7)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:7)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:7)>]’
Graph.h:229:33:   required from ‘bool gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:277:96:   required from ‘{anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:277:86:   required from ‘struct {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:277:46:   required from ‘void {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:526:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:230:33: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
             return node -> data == oldData;
                                 ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:7)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:7)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:7)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:7)>]’
Graph.h:229:33:   required from ‘bool gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:277:96:   required from ‘{anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:277:86:   required from ‘struct {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:277:46:   required from ‘void {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:526:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::replace(const N&, const N&)::<lambda(auto:8)> [with auto:8 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:8)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:8)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:8)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:8)>]’
Graph.h:234:25:   required from ‘bool gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:277:96:   required from ‘{anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:277:86:   required from ‘struct {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:277:46:   required from ‘void {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:526:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:235:37: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
                 return node -> data == newData;
                                     ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:8)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:8)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:8)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:8)>]’
Graph.h:234:25:   required from ‘bool gdwg::Graph<N, E>::replace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:277:96:   required from ‘{anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:277:86:   required from ‘struct {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:277:46:   required from ‘void {anonymous}::_testReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:526:37:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::mergeReplace(const N&, const N&)::<lambda(auto:9)> [with auto:9 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:9)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:9)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:9)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:9)>]’
Graph.h:251:37:   required from ‘void gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:325:86:   required from ‘{anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:325:76:   required from ‘struct {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:325:31:   required from ‘void {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:529:42:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:252:33: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
             return node -> data == oldData;
                                 ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:9)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:9)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:9)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:9)>]’
Graph.h:251:37:   required from ‘void gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:325:86:   required from ‘{anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:325:76:   required from ‘struct {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:325:31:   required from ‘void {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:529:42:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::mergeReplace(const N&, const N&)::<lambda(auto:10)> [with auto:10 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:10)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:10)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:10)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:10)>]’
Graph.h:254:37:   required from ‘void gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:325:86:   required from ‘{anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:325:76:   required from ‘struct {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:325:31:   required from ‘void {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:529:42:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:255:33: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
             return node -> data == newData;
                                 ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:10)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:10)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:10)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:10)>]’
Graph.h:254:37:   required from ‘void gdwg::Graph<N, E>::mergeReplace(const N&, const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:325:86:   required from ‘{anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:325:76:   required from ‘struct {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:325:31:   required from ‘void {anonymous}::_testMergeReplace(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:529:42:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::deleteNode(const N&)::<lambda(auto:14)> [with auto:14 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:14)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:14)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:14)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:14)>]’
Graph.h:327:33:   required from ‘void gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:367:32:   required from ‘{anonymous}::_testDeleteNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:367:53:   required from ‘struct {anonymous}::_testDeleteNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:367:27:   required from ‘void {anonymous}::_testDeleteNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:545:40:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:329:35: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
                 return it -> data == val;
                                   ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:14)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:14)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:14)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:14)>]’
Graph.h:327:33:   required from ‘void gdwg::Graph<N, E>::deleteNode(const N&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:367:32:   required from ‘{anonymous}::_testDeleteNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:367:53:   required from ‘struct {anonymous}::_testDeleteNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:367:27:   required from ‘void {anonymous}::_testDeleteNode(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:545:40:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
In file included from Fuzzer.cpp:16:0:
Graph.h: In instantiation of ‘gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&)::<lambda(auto:17)> [with auto:17 = std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>; N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’:
/usr/include/c++/5/bits/predefined_ops.h:234:30:   required from ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:17)>]’
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:17)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:17)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:17)>]’
Graph.h:363:33:   required from ‘void gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:386:32:   required from ‘{anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:386:63:   required from ‘struct {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:386:27:   required from ‘void {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:548:40:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
Graph.h:365:35: error: no match for ‘operator==’ (operand types are ‘{anonymous}::Unhashable’ and ‘const {anonymous}::Unhashable’)
                 return it -> data == src;
                                   ^
In file included from /usr/include/c++/5/bits/stl_algobase.h:71:0,
                 from /usr/include/c++/5/deque:60,
                 from Fuzzer.cpp:2:
/usr/include/c++/5/bits/predefined_ops.h: In instantiation of ‘bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:17)>]’:
/usr/include/c++/5/bits/stl_algo.h:120:14:   required from ‘_RandomAccessIterator std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:17)> >]’
/usr/include/c++/5/bits/stl_algo.h:161:23:   required from ‘_Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:17)> >]’
/usr/include/c++/5/bits/stl_algo.h:3815:28:   required from ‘_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<const std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>*, std::vector<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node>, std::allocator<std::shared_ptr<gdwg::Graph<{anonymous}::Unhashable, {anonymous}::Hashable>::Node> > > >; _Predicate = gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]::<lambda(auto:17)>]’
Graph.h:363:33:   required from ‘void gdwg::Graph<N, E>::deleteEdge(const N&, const N&, const E&) [with N = {anonymous}::Unhashable; E = {anonymous}::Hashable]’
Fuzzer.cpp:386:32:   required from ‘{anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&)::<lambda()> [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:386:63:   required from ‘struct {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]::<lambda()>’
Fuzzer.cpp:386:27:   required from ‘void {anonymous}::_testDeleteEdge(gdwg::Graph<N, E>&, {anonymous}::SlowGraph<NodeLabel, EdgeValue>&, std::uniform_int_distribution<long unsigned int>&) [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:548:40:   required from ‘void {anonymous}::_test() [with NodeLabel = {anonymous}::Unhashable; EdgeValue = {anonymous}::Hashable]’
Fuzzer.cpp:637:45:   required from here
/usr/include/c++/5/bits/predefined_ops.h:234:30: error: void value not ignored as it ought to be
  { return bool(_M_pred(*__it)); }
                              ^
make: *** [Fuzzer.o] Error 1
test.sh: 23: test.sh: ./GraphTester: not found
